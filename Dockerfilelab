# Code ideas from https://github.com/jupyter/docker-stacks/tree/master/examples/docker-compose
# https://github.com/jupyter/docker-stacks/blob/master/docs/using/recipes.md

# Most recent minimal-notebook image which runs Python 3.6
FROM jupyter/minimal-notebook

USER jovyan

# Using pip install instead of conda since zipline has conda version issues, see:
# https://github.com/quantopian/zipline/issues/2514
ENV NUMPY_VERSION=1.14.1 PANDAS_VERSION=0.22.0 SCIPY_VERSION=1.0.0 STATSMODELS_VERSION=0.9.0 PANDAS_DATAREADER_VERSION=0.4.0 DASK_VERSION=0.17.1
ENV NEW_PANDAS=1 CERTIFI_VERSION=2018.8.24 TALIB_VERSION=0.4.9 CONDA_NPY=1.14 CONDA_PY=3.6.11

# before_install:
#   - source ./ci/travis/install_miniconda.sh
#   - |
#     if [ "$OLD_PANDAS" ]; then
#       NUMPY_VERSION=1.11.3 PANDAS_VERSION=0.18.1 SCIPY_VERSION=0.17.1
#     else
#       NUMPY_VERSION=1.14.1 PANDAS_VERSION=0.22.0 SCIPY_VERSION=1.0.0 STATSMODELS_VERSION=0.9.0 PANDAS_DATAREADER_VERSION=0.4.0 DASK_VERSION=0.17.1
#     fi
#  - source ./ci/travis/overwrite_requirements.sh

#RUN --mount=type=cache,id=custom-pip,target=/root/.cache/pip pip3 install setuptools==45 && pip install pip-tools 
#RUN pip3 install setuptools==45 && pip install pip-tools 
RUN conda config --system --set channel_priority flexible
#RUN conda install setuptools==45 pip-tools --yes
RUN conda install setuptools==45 pip-tools --yes && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

#USER jovyan

#install:
#  - conda info -a
#  - conda install conda=4.3.30 conda-build=3.0.28 anaconda-client=1.6.3 --yes -q
#  - conda list

RUN conda install conda-build anaconda-client --yes  && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

#
#
#COPY etc ./etc
#USER root
#RUN chown -R jovyan:100 etc/requirements_locked.txt
COPY --chown=jovyan:100 . .
#RUN  pip-compile --no-emit-index-url --output-file=requirements_locked.txt etc/requirements.in etc/requirements_blaze.in etc/requirements_build.in etc/requirements_dev.in etc/requirements_docs.in etc/requirements_talib.in  etc/requirements_tdx.in -P numpy==1.14.1 -P scipy==1.0.0 -P pandas==0.22.0 -P pandas_datareader==0.4.0 -P dask==0.17.1 -P statsmodels==0.9.0 -P certifi==2018.8.24 


# use created 
# RUN  pip-compile --no-emit-index-url --output-file=etc/requirements_locked.txt etc/requirements.in etc/requirements_blaze.in etc/requirements_build.in etc/requirements_dev.in etc/requirements_docs.in etc/requirements_talib.in  etc/requirements_tdx.in -P numpy==1.14.1 -P scipy==1.0.0 -P pandas==0.22.0 -P pandas_datareader==0.4.0 -P dask==0.17.1 -P statsmodels==0.9.0 -P certifi==2018.8.24 -P matplotlib==3.2.2 
#USER jovyan
#COPY. .

#USER root
#RUN cp requirements_locked.txt ./etc/
# overwrite same as the aboved pip-compile
RUN /bin/bash ./ci/travis/overwrite_requirements.sh

RUN cat etc/requirements_locked.txt
#RUN if [[ "$TRAVIS_SECURE_ENV_VARS" = "true" && "$TRAVIS_BRANCH" = "master" && "$TRAVIS_PULL_REQUEST" = "false" ]]; then DO_UPLOAD="true"; else DO_UPLOAD="false"; fi
#
#TALIB_VERSION=`cat ./etc/requirements_locked.txt | grep "ta-lib" | sed "s/ta-lib==\([^ ]*\) *.*/\1/"`
#CERTIFI_VERSION=`cat ./etc/requirements_locked.txt | grep "certifi" | sed "s/certifi==\([^ ]*\) *.*/\1/"`
#IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
#CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
#CONDA_PY=$TRAVIS_PYTHON_VERSION
#TALIB_VERSION=`cat ./etc/requirements_locked.txt | grep "ta-lib" | sed "s/ta-lib==\([^ ]*\) *.*/\1/"`
#CERTIFI_VERSION=`cat ./etc/requirements_locked.txt | grep "certifi" | sed "s/certifi==\([^ ]*\) *.*/\1/"`
#IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
#CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}

#CONDA_PY=$TRAVIS_PYTHON_VERSION
#CMD /bin/bash -c "for recipe in $(ls -d conda/*/ | xargs -I {} basename {}); do
#  if [[ "$recipe" = "zipline" ]]; then continue; fi
#
#  conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --skip-existing --old-build-string -c quantopian -c quantopian/label/ci
##  RECIPE_OUTPUT=$(conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --old-build-string --output)
##  if [[ -f "$RECIPE_OUTPUT" && "$DO_UPLOAD" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload "$RECIPE_OUTPUT" -u quantopian --label ci; fi
#done"
  # Make sure stdout is in blocking mode. If we don't, then conda create will barf during downloads.
  # See https://github.com/travis-ci/travis-ci/issues/4704#issuecomment-348435959 for details.
  #

#CMD [sh loopcondaa.sh]
#RUN sh loopcondaa.sh $CONDA_PY $CONDA_NPY
RUN /bin/bash loopcondaa.sh
#RUN  python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
  # We conda install certifi at the pinned exact version because it is a transitive dependency of zipline via requests and uses distutils for packaging.
  # Since conda installs latest certifi by default, we would fail to uninstall that new version when trying to install the pinned version using pip later in the build:
  # "Cannot uninstall 'certifi'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall."
#RUN  conda create -n testenv --use-local --yes -c quantopian -c quantopian/label/ci pip python=$TRAVIS_PYTHON_VERSION numpy=$NUMPY_VERSION pandas=$PANDAS_VERSION scipy=$SCIPY_VERSION ta-lib=$TALIB_VERSION libgfortran=3.0 certifi=$CERTIFI_VERSION
RUN  conda install -c local -c quantopian -c quantopian/label/ci numpy=$NUMPY_VERSION pandas=$PANDAS_VERSION scipy=$SCIPY_VERSION ta-lib=$TALIB_VERSION libgfortran=3.0 certifi=$CERTIFI_VERSION && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER
# RUN source activate testenv

  # XXX: With TRAVIS and CI both set, pip installing bcolz tries to compile it with coverage on py2, which fails to link against gcov on OSX.
  # https://github.com/Blosc/bcolz/blob/8234a7505da5188dbaf415b7e36d4609d2c8c2f1/setup.py#L134-L136
#RUN TRAVIS='' EXTERNAL_REQUIREMENTS='coveralls' etc/dev-install --cache-dir="$HOME/.cache/.pip/pip_np$CONDA_NPY"
#  - cat etc/requirements_locked.txt
RUN etc/dev-install --cache-dir="$HOME/.cache/.pip/pip_np$CONDA_NPY"

#COPY ./ci/travis/instalil_miniconda.sh 
#COPY requirslab .
#RUN pip install -r requirslab
#RUN rm requirslab
## Add permanent pip/conda installs here
## e.g., RUN conda install -f -y -q -c conda-forge dask=2.6.0
#
##COPY zipline-notebook.ipynb .
RUN conda clean --all -y

USER root

# Add permanent apt-get installs and other root commands here
# e.g., RUN apt-get install npm nodejs





